cabal-version: 2.2
Name:		CPL
Version:	0.1.0
License:	BSD-3-Clause
License-File:	COPYING
Author:		Masahiro Sakai (masahiro.sakai@gmail.com)
Maintainer:	masahiro.sakai@gmail.com
Category:	Compilers/Interpreters
Homepage:       https://github.com/msakai/cpl
Synopsis:	An interpreter of Hagino's Categorical Programming Language (CPL).
Description:
   CPL is a functional programming language based on category
   theory. Data types are declared in a categorical manner by
   adjunctions. Data types that can be handled include the terminal
   object, the initial object, the binary product functor, the binary
   coproduct functor, the exponential functor, the natural number object,
   the functor for finite lists, and the functor for infinite lists.
   Each data type is declared with its basic operations or
   morphisms. Programs consist of these morphisms, and execution of
   programs is the reduction of elements (i.e. special morphisms) to
   their canonical form.
Extra-Doc-Files:
   README.markdown,
   CHANGELOG.markdown
Extra-Source-Files:
   samples/ack.cpl,
   samples/automata.cdt,
   samples/ccc.cdt,
   samples/examples.cpl,
   samples/examples.txt,
   samples/misc.cdt,
   samples/obscure.cdt,
   samples/rec.cdt,
   samples/benchmark.cpl,
   samples/ack_3_4.cpl,
   samples/function.cpl,
   src/CDT.hs-boot,
   windows/COPYING.rtf,
   windows/CPL.wxs,
   windows/build_msi.hs,
   windows/build_zip.hs,
   misc/build_zip.hs
Build-Type: Simple

source-repository head
  type:     git
  location: git://github.com/msakai/cpl.git

Flag Readline
  Description: Use Readline
  Default: True

Flag Haskeline
  Description: Use Haskeline
  Default: True

Flag LinuxStatic
  Description: build statically linked binaries
  Default: False
  Manual: True

Executable cpl
  Main-is: Main.hs
  HS-Source-Dirs: src
  Other-Modules: AExp CDT CDTParser CPLSystem Exp ExpParser FE Funct ParserUtils Simp Statement Subst Type Typing Variance Paths_CPL
  Build-Depends: base >=4 && <5, mtl >=2.2.1, containers, array, parsec
  Default-Language: Haskell2010
  Other-Extensions: TypeSynonymInstances, FlexibleInstances, CPP, GeneralizedNewtypeDeriving
  if flag(Readline)
    CPP-Options: "-DUSE_READLINE_PACKAGE"
    Build-Depends: readline
  else
    if flag(Haskeline)
      CPP-Options: "-DUSE_HASKELINE_PACKAGE"
      Build-Depends: haskeline
  if flag(LinuxStatic)
    GHC-Options: -static -optl-static -optl-pthread
